/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package AvroTests;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MyDataType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyDataType\",\"namespace\":\"AvroTests\",\"fields\":[{\"name\":\"SomeNumber\",\"type\":\"int\"},{\"name\":\"SomeString\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int SomeNumber;
  @Deprecated public java.lang.CharSequence SomeString;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public MyDataType() {}

  /**
   * All-args constructor.
   */
  public MyDataType(java.lang.Integer SomeNumber, java.lang.CharSequence SomeString) {
    this.SomeNumber = SomeNumber;
    this.SomeString = SomeString;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return SomeNumber;
    case 1: return SomeString;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: SomeNumber = (java.lang.Integer)value$; break;
    case 1: SomeString = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'SomeNumber' field.
   */
  public java.lang.Integer getSomeNumber() {
    return SomeNumber;
  }

  /**
   * Sets the value of the 'SomeNumber' field.
   * @param value the value to set.
   */
  public void setSomeNumber(java.lang.Integer value) {
    this.SomeNumber = value;
  }

  /**
   * Gets the value of the 'SomeString' field.
   */
  public java.lang.CharSequence getSomeString() {
    return SomeString;
  }

  /**
   * Sets the value of the 'SomeString' field.
   * @param value the value to set.
   */
  public void setSomeString(java.lang.CharSequence value) {
    this.SomeString = value;
  }

  /** Creates a new MyDataType RecordBuilder */
  public static AvroTests.MyDataType.Builder newBuilder() {
    return new AvroTests.MyDataType.Builder();
  }
  
  /** Creates a new MyDataType RecordBuilder by copying an existing Builder */
  public static AvroTests.MyDataType.Builder newBuilder(AvroTests.MyDataType.Builder other) {
    return new AvroTests.MyDataType.Builder(other);
  }
  
  /** Creates a new MyDataType RecordBuilder by copying an existing MyDataType instance */
  public static AvroTests.MyDataType.Builder newBuilder(AvroTests.MyDataType other) {
    return new AvroTests.MyDataType.Builder(other);
  }
  
  /**
   * RecordBuilder for MyDataType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyDataType>
    implements org.apache.avro.data.RecordBuilder<MyDataType> {

    private int SomeNumber;
    private java.lang.CharSequence SomeString;

    /** Creates a new Builder */
    private Builder() {
      super(AvroTests.MyDataType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(AvroTests.MyDataType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.SomeNumber)) {
        this.SomeNumber = data().deepCopy(fields()[0].schema(), other.SomeNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.SomeString)) {
        this.SomeString = data().deepCopy(fields()[1].schema(), other.SomeString);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing MyDataType instance */
    private Builder(AvroTests.MyDataType other) {
            super(AvroTests.MyDataType.SCHEMA$);
      if (isValidValue(fields()[0], other.SomeNumber)) {
        this.SomeNumber = data().deepCopy(fields()[0].schema(), other.SomeNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.SomeString)) {
        this.SomeString = data().deepCopy(fields()[1].schema(), other.SomeString);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'SomeNumber' field */
    public java.lang.Integer getSomeNumber() {
      return SomeNumber;
    }
    
    /** Sets the value of the 'SomeNumber' field */
    public AvroTests.MyDataType.Builder setSomeNumber(int value) {
      validate(fields()[0], value);
      this.SomeNumber = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'SomeNumber' field has been set */
    public boolean hasSomeNumber() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'SomeNumber' field */
    public AvroTests.MyDataType.Builder clearSomeNumber() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'SomeString' field */
    public java.lang.CharSequence getSomeString() {
      return SomeString;
    }
    
    /** Sets the value of the 'SomeString' field */
    public AvroTests.MyDataType.Builder setSomeString(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.SomeString = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'SomeString' field has been set */
    public boolean hasSomeString() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'SomeString' field */
    public AvroTests.MyDataType.Builder clearSomeString() {
      SomeString = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public MyDataType build() {
      try {
        MyDataType record = new MyDataType();
        record.SomeNumber = fieldSetFlags()[0] ? this.SomeNumber : (java.lang.Integer) defaultValue(fields()[0]);
        record.SomeString = fieldSetFlags()[1] ? this.SomeString : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
