/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package Contoso.Cars.Messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DiscreteSensor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DiscreteSensor\",\"namespace\":\"Contoso.Cars.Messages\",\"fields\":[{\"name\":\"SensorSetEventType\",\"type\":\"string\"},{\"name\":\"LowFuel\",\"type\":\"boolean\"},{\"name\":\"DoorAjar\",\"type\":\"boolean\"},{\"name\":\"EngineRunning\",\"type\":\"boolean\"},{\"name\":\"LowOilPressure\",\"type\":\"boolean\"},{\"name\":\"DoorLocked\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence SensorSetEventType;
  @Deprecated public boolean LowFuel;
  @Deprecated public boolean DoorAjar;
  @Deprecated public boolean EngineRunning;
  @Deprecated public boolean LowOilPressure;
  @Deprecated public boolean DoorLocked;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DiscreteSensor() {}

  /**
   * All-args constructor.
   */
  public DiscreteSensor(java.lang.CharSequence SensorSetEventType, java.lang.Boolean LowFuel, java.lang.Boolean DoorAjar, java.lang.Boolean EngineRunning, java.lang.Boolean LowOilPressure, java.lang.Boolean DoorLocked) {
    this.SensorSetEventType = SensorSetEventType;
    this.LowFuel = LowFuel;
    this.DoorAjar = DoorAjar;
    this.EngineRunning = EngineRunning;
    this.LowOilPressure = LowOilPressure;
    this.DoorLocked = DoorLocked;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return SensorSetEventType;
    case 1: return LowFuel;
    case 2: return DoorAjar;
    case 3: return EngineRunning;
    case 4: return LowOilPressure;
    case 5: return DoorLocked;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: SensorSetEventType = (java.lang.CharSequence)value$; break;
    case 1: LowFuel = (java.lang.Boolean)value$; break;
    case 2: DoorAjar = (java.lang.Boolean)value$; break;
    case 3: EngineRunning = (java.lang.Boolean)value$; break;
    case 4: LowOilPressure = (java.lang.Boolean)value$; break;
    case 5: DoorLocked = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'SensorSetEventType' field.
   */
  public java.lang.CharSequence getSensorSetEventType() {
    return SensorSetEventType;
  }

  /**
   * Sets the value of the 'SensorSetEventType' field.
   * @param value the value to set.
   */
  public void setSensorSetEventType(java.lang.CharSequence value) {
    this.SensorSetEventType = value;
  }

  /**
   * Gets the value of the 'LowFuel' field.
   */
  public java.lang.Boolean getLowFuel() {
    return LowFuel;
  }

  /**
   * Sets the value of the 'LowFuel' field.
   * @param value the value to set.
   */
  public void setLowFuel(java.lang.Boolean value) {
    this.LowFuel = value;
  }

  /**
   * Gets the value of the 'DoorAjar' field.
   */
  public java.lang.Boolean getDoorAjar() {
    return DoorAjar;
  }

  /**
   * Sets the value of the 'DoorAjar' field.
   * @param value the value to set.
   */
  public void setDoorAjar(java.lang.Boolean value) {
    this.DoorAjar = value;
  }

  /**
   * Gets the value of the 'EngineRunning' field.
   */
  public java.lang.Boolean getEngineRunning() {
    return EngineRunning;
  }

  /**
   * Sets the value of the 'EngineRunning' field.
   * @param value the value to set.
   */
  public void setEngineRunning(java.lang.Boolean value) {
    this.EngineRunning = value;
  }

  /**
   * Gets the value of the 'LowOilPressure' field.
   */
  public java.lang.Boolean getLowOilPressure() {
    return LowOilPressure;
  }

  /**
   * Sets the value of the 'LowOilPressure' field.
   * @param value the value to set.
   */
  public void setLowOilPressure(java.lang.Boolean value) {
    this.LowOilPressure = value;
  }

  /**
   * Gets the value of the 'DoorLocked' field.
   */
  public java.lang.Boolean getDoorLocked() {
    return DoorLocked;
  }

  /**
   * Sets the value of the 'DoorLocked' field.
   * @param value the value to set.
   */
  public void setDoorLocked(java.lang.Boolean value) {
    this.DoorLocked = value;
  }

  /** Creates a new DiscreteSensor RecordBuilder */
  public static Contoso.Cars.Messages.DiscreteSensor.Builder newBuilder() {
    return new Contoso.Cars.Messages.DiscreteSensor.Builder();
  }
  
  /** Creates a new DiscreteSensor RecordBuilder by copying an existing Builder */
  public static Contoso.Cars.Messages.DiscreteSensor.Builder newBuilder(Contoso.Cars.Messages.DiscreteSensor.Builder other) {
    return new Contoso.Cars.Messages.DiscreteSensor.Builder(other);
  }
  
  /** Creates a new DiscreteSensor RecordBuilder by copying an existing DiscreteSensor instance */
  public static Contoso.Cars.Messages.DiscreteSensor.Builder newBuilder(Contoso.Cars.Messages.DiscreteSensor other) {
    return new Contoso.Cars.Messages.DiscreteSensor.Builder(other);
  }
  
  /**
   * RecordBuilder for DiscreteSensor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DiscreteSensor>
    implements org.apache.avro.data.RecordBuilder<DiscreteSensor> {

    private java.lang.CharSequence SensorSetEventType;
    private boolean LowFuel;
    private boolean DoorAjar;
    private boolean EngineRunning;
    private boolean LowOilPressure;
    private boolean DoorLocked;

    /** Creates a new Builder */
    private Builder() {
      super(Contoso.Cars.Messages.DiscreteSensor.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Contoso.Cars.Messages.DiscreteSensor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.SensorSetEventType)) {
        this.SensorSetEventType = data().deepCopy(fields()[0].schema(), other.SensorSetEventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.LowFuel)) {
        this.LowFuel = data().deepCopy(fields()[1].schema(), other.LowFuel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.DoorAjar)) {
        this.DoorAjar = data().deepCopy(fields()[2].schema(), other.DoorAjar);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.EngineRunning)) {
        this.EngineRunning = data().deepCopy(fields()[3].schema(), other.EngineRunning);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.LowOilPressure)) {
        this.LowOilPressure = data().deepCopy(fields()[4].schema(), other.LowOilPressure);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.DoorLocked)) {
        this.DoorLocked = data().deepCopy(fields()[5].schema(), other.DoorLocked);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DiscreteSensor instance */
    private Builder(Contoso.Cars.Messages.DiscreteSensor other) {
            super(Contoso.Cars.Messages.DiscreteSensor.SCHEMA$);
      if (isValidValue(fields()[0], other.SensorSetEventType)) {
        this.SensorSetEventType = data().deepCopy(fields()[0].schema(), other.SensorSetEventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.LowFuel)) {
        this.LowFuel = data().deepCopy(fields()[1].schema(), other.LowFuel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.DoorAjar)) {
        this.DoorAjar = data().deepCopy(fields()[2].schema(), other.DoorAjar);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.EngineRunning)) {
        this.EngineRunning = data().deepCopy(fields()[3].schema(), other.EngineRunning);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.LowOilPressure)) {
        this.LowOilPressure = data().deepCopy(fields()[4].schema(), other.LowOilPressure);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.DoorLocked)) {
        this.DoorLocked = data().deepCopy(fields()[5].schema(), other.DoorLocked);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'SensorSetEventType' field */
    public java.lang.CharSequence getSensorSetEventType() {
      return SensorSetEventType;
    }
    
    /** Sets the value of the 'SensorSetEventType' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder setSensorSetEventType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.SensorSetEventType = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'SensorSetEventType' field has been set */
    public boolean hasSensorSetEventType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'SensorSetEventType' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder clearSensorSetEventType() {
      SensorSetEventType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'LowFuel' field */
    public java.lang.Boolean getLowFuel() {
      return LowFuel;
    }
    
    /** Sets the value of the 'LowFuel' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder setLowFuel(boolean value) {
      validate(fields()[1], value);
      this.LowFuel = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'LowFuel' field has been set */
    public boolean hasLowFuel() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'LowFuel' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder clearLowFuel() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'DoorAjar' field */
    public java.lang.Boolean getDoorAjar() {
      return DoorAjar;
    }
    
    /** Sets the value of the 'DoorAjar' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder setDoorAjar(boolean value) {
      validate(fields()[2], value);
      this.DoorAjar = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'DoorAjar' field has been set */
    public boolean hasDoorAjar() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'DoorAjar' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder clearDoorAjar() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'EngineRunning' field */
    public java.lang.Boolean getEngineRunning() {
      return EngineRunning;
    }
    
    /** Sets the value of the 'EngineRunning' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder setEngineRunning(boolean value) {
      validate(fields()[3], value);
      this.EngineRunning = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'EngineRunning' field has been set */
    public boolean hasEngineRunning() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'EngineRunning' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder clearEngineRunning() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'LowOilPressure' field */
    public java.lang.Boolean getLowOilPressure() {
      return LowOilPressure;
    }
    
    /** Sets the value of the 'LowOilPressure' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder setLowOilPressure(boolean value) {
      validate(fields()[4], value);
      this.LowOilPressure = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'LowOilPressure' field has been set */
    public boolean hasLowOilPressure() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'LowOilPressure' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder clearLowOilPressure() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'DoorLocked' field */
    public java.lang.Boolean getDoorLocked() {
      return DoorLocked;
    }
    
    /** Sets the value of the 'DoorLocked' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder setDoorLocked(boolean value) {
      validate(fields()[5], value);
      this.DoorLocked = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'DoorLocked' field has been set */
    public boolean hasDoorLocked() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'DoorLocked' field */
    public Contoso.Cars.Messages.DiscreteSensor.Builder clearDoorLocked() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public DiscreteSensor build() {
      try {
        DiscreteSensor record = new DiscreteSensor();
        record.SensorSetEventType = fieldSetFlags()[0] ? this.SensorSetEventType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.LowFuel = fieldSetFlags()[1] ? this.LowFuel : (java.lang.Boolean) defaultValue(fields()[1]);
        record.DoorAjar = fieldSetFlags()[2] ? this.DoorAjar : (java.lang.Boolean) defaultValue(fields()[2]);
        record.EngineRunning = fieldSetFlags()[3] ? this.EngineRunning : (java.lang.Boolean) defaultValue(fields()[3]);
        record.LowOilPressure = fieldSetFlags()[4] ? this.LowOilPressure : (java.lang.Boolean) defaultValue(fields()[4]);
        record.DoorLocked = fieldSetFlags()[5] ? this.DoorLocked : (java.lang.Boolean) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
